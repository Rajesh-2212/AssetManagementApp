@page "/reports"
@using AssetManagementApp.Models
@inject AssetManagementApp.Services.IAssetService AssetService
@inject AssetManagementApp.Services.IEmployeeService EmployeeService
@inject IJSRuntime Js

<h3>Reports Dashboard</h3>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-center border-primary shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-primary">Total Assets</h5>
                    <h2>@totalAssets</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center border-success shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-success">Assigned</h5>
                    <h2>@assignedAssets</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center border-warning shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-warning">Available</h5>
                    <h2>@availableAssets</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center border-info shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-info">Employees</h5>
                    <h2>@totalEmployees</h2>
                </div>
            </div>
        </div>
    </div>

    <h5>Recent Assignments</h5>
    @if (recentAssignments.Any())
    {
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Asset</th>
                    <th>Employee</th>
                    <th>Assigned</th>
                    <th>Returned</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in recentAssignments)
                {
                    <tr>
                        <td>@a.Asset?.Name ?? "-"</td>
                        <td>@a.Employee?.FullName ?? "-"</td>
                        <td>@a.AssignedDate.ToString("yyyy-MM-dd")</td>
                        <td>@(a.ReturnedDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                        <td>@a.Notes</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-muted">No recent assignments found.</p>
    }
}

@code {
    private int totalAssets;
    private int assignedAssets;
    private int availableAssets;
    private int totalEmployees;
    private List<AssetAssignment> recentAssignments = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadReportData();
    }

    private async Task LoadReportData()
    {
        isLoading = true;
        try
        {
            var allAssets = (await AssetService.GetAllAsync()).ToList();
            var allEmployees = (await EmployeeService.GetAllAsync()).ToList();
            var allAssignments = (await AssetService.GetAllAssignmentsAsync()).ToList();

            totalAssets = allAssets.Count;
            assignedAssets = allAssignments.Count(a => a.ReturnedDate == null);
            availableAssets = totalAssets - assignedAssets;
            totalEmployees = allEmployees.Count;

            recentAssignments = allAssignments
                .OrderByDescending(a => a.AssignedDate)
                .Take(10)
                .ToList();
        }
        catch (Exception ex)
        {
            await Js.InvokeVoidAsync("alert", $"Error loading report: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
